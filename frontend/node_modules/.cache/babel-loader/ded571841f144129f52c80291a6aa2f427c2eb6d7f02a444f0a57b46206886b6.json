{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8000';\nconst TMDB_API_KEY = process.env.REACT_APP_TMDB_API_KEY || '9bcdb1078fa24262529f44ab427f223e';\nconst apiRequest = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  console.log('Making API request to:', url);\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers\n    },\n    ...options\n  };\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  try {\n    const response = await fetch(url, config);\n\n    // Handle different response types\n    if (response.status === 204) {\n      return null; // No content\n    }\n    const data = await response.json().catch(() => ({}));\n    if (!response.ok) {\n      throw new Error(data.detail || data.message || `HTTP error! status: ${response.status}`);\n    }\n    return data;\n  } catch (error) {\n    console.error('API request failed:', error);\n\n    // More specific error handling\n    if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {\n      throw new Error('Network error: Unable to connect to server. Please check your connection.');\n    }\n    throw error;\n  }\n};\nexport const movieAPI = {\n  getPopularMovies: async () => {\n    try {\n      const response = await fetch(`https://api.themoviedb.org/3/movie/popular?api_key=${TMDB_API_KEY}&language=en-US&page=1`);\n      if (!response.ok) {\n        throw new Error(`TMDB API error: ${response.status}`);\n      }\n      return response.json();\n    } catch (error) {\n      console.error('Error fetching popular movies:', error);\n      throw error;\n    }\n  },\n  searchMovies: async query => {\n    try {\n      const response = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${TMDB_API_KEY}&language=en-US&query=${encodeURIComponent(query)}&page=1`);\n      if (!response.ok) {\n        throw new Error(`TMDB API error: ${response.status}`);\n      }\n      return response.json();\n    } catch (error) {\n      console.error('Error searching movies:', error);\n      throw error;\n    }\n  },\n  advancedSearch: async (query, year = null, genre = null) => {\n    try {\n      let url = `https://api.themoviedb.org/3/search/movie?api_key=${TMDB_API_KEY}&language=en-US&query=${encodeURIComponent(query)}&page=1`;\n      if (year) url += `&year=${year}`;\n      if (genre) url += `&with_genres=${genre}`;\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`TMDB API error: ${response.status}`);\n      }\n      return response.json();\n    } catch (error) {\n      console.error('Error in advanced search:', error);\n      throw error;\n    }\n  },\n  getMovieDetails: async movieId => {\n    try {\n      const response = await fetch(`https://api.themoviedb.org/3/movie/${movieId}?api_key=${TMDB_API_KEY}&language=en-US`);\n      if (!response.ok) {\n        throw new Error(`TMDB API error: ${response.status}`);\n      }\n      return response.json();\n    } catch (error) {\n      console.error('Error fetching movie details:', error);\n      throw error;\n    }\n  },\n  getMovieCredits: async movieId => {\n    try {\n      const response = await fetch(`https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${TMDB_API_KEY}`);\n      if (!response.ok) {\n        throw new Error(`TMDB API error: ${response.status}`);\n      }\n      return response.json();\n    } catch (error) {\n      console.error('Error fetching movie credits:', error);\n      throw error;\n    }\n  }\n};\nexport const authAPI = {\n  register: async userData => {\n    return apiRequest('/api/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  },\n  login: async credentials => {\n    return apiRequest('/api/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n  },\n  getCurrentUser: async () => {\n    return apiRequest('/api/auth/me');\n  }\n};\nexport const reviewAPI = {\n  createReview: async reviewData => {\n    return apiRequest('/api/reviews', {\n      method: 'POST',\n      body: JSON.stringify(reviewData)\n    });\n  },\n  getMovieReviews: async movieId => {\n    return apiRequest(`/api/reviews/movie/${movieId}`);\n  },\n  getUserReviews: async () => {\n    return apiRequest('/api/reviews/user');\n  },\n  deleteReview: async reviewId => {\n    return apiRequest(`/api/reviews/${reviewId}`, {\n      method: 'DELETE'\n    });\n  }\n};\nexport const healthCheck = async () => {\n  return apiRequest('/api/health');\n};","map":{"version":3,"names":["API_BASE_URL","TMDB_API_KEY","process","env","REACT_APP_TMDB_API_KEY","apiRequest","endpoint","options","url","console","log","config","headers","token","localStorage","getItem","Authorization","response","fetch","status","data","json","catch","ok","Error","detail","message","error","name","includes","movieAPI","getPopularMovies","searchMovies","query","encodeURIComponent","advancedSearch","year","genre","getMovieDetails","movieId","getMovieCredits","authAPI","register","userData","method","body","JSON","stringify","login","credentials","getCurrentUser","reviewAPI","createReview","reviewData","getMovieReviews","getUserReviews","deleteReview","reviewId","healthCheck"],"sources":["C:/Users/Bishal/OneDrive/Desktop/movie-review-app/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8000';\r\nconst TMDB_API_KEY = process.env.REACT_APP_TMDB_API_KEY || '9bcdb1078fa24262529f44ab427f223e';\r\n\r\nconst apiRequest = async (endpoint, options = {}) => {\r\n    const url = `${API_BASE_URL}${endpoint}`;\r\n\r\n    console.log('Making API request to:', url);\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            ...options.headers,\r\n        },\r\n        ...options,\r\n    };\r\n\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(url, config);\r\n\r\n        // Handle different response types\r\n        if (response.status === 204) {\r\n            return null; // No content\r\n        }\r\n\r\n        const data = await response.json().catch(() => ({}));\r\n\r\n        if (!response.ok) {\r\n            throw new Error(data.detail || data.message || `HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error('API request failed:', error);\r\n\r\n        // More specific error handling\r\n        if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {\r\n            throw new Error('Network error: Unable to connect to server. Please check your connection.');\r\n        }\r\n\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const movieAPI = {\r\n    getPopularMovies: async () => {\r\n        try {\r\n            const response = await fetch(\r\n                `https://api.themoviedb.org/3/movie/popular?api_key=${TMDB_API_KEY}&language=en-US&page=1`\r\n            );\r\n            if (!response.ok) {\r\n                throw new Error(`TMDB API error: ${response.status}`);\r\n            }\r\n            return response.json();\r\n        } catch (error) {\r\n            console.error('Error fetching popular movies:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    searchMovies: async (query) => {\r\n        try {\r\n            const response = await fetch(\r\n                `https://api.themoviedb.org/3/search/movie?api_key=${TMDB_API_KEY}&language=en-US&query=${encodeURIComponent(query)}&page=1`\r\n            );\r\n            if (!response.ok) {\r\n                throw new Error(`TMDB API error: ${response.status}`);\r\n            }\r\n            return response.json();\r\n        } catch (error) {\r\n            console.error('Error searching movies:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    advancedSearch: async (query, year = null, genre = null) => {\r\n        try {\r\n            let url = `https://api.themoviedb.org/3/search/movie?api_key=${TMDB_API_KEY}&language=en-US&query=${encodeURIComponent(query)}&page=1`;\r\n\r\n            if (year) url += `&year=${year}`;\r\n            if (genre) url += `&with_genres=${genre}`;\r\n\r\n            const response = await fetch(url);\r\n            if (!response.ok) {\r\n                throw new Error(`TMDB API error: ${response.status}`);\r\n            }\r\n            return response.json();\r\n        } catch (error) {\r\n            console.error('Error in advanced search:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    getMovieDetails: async (movieId) => {\r\n        try {\r\n            const response = await fetch(\r\n                `https://api.themoviedb.org/3/movie/${movieId}?api_key=${TMDB_API_KEY}&language=en-US`\r\n            );\r\n            if (!response.ok) {\r\n                throw new Error(`TMDB API error: ${response.status}`);\r\n            }\r\n            return response.json();\r\n        } catch (error) {\r\n            console.error('Error fetching movie details:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    getMovieCredits: async (movieId) => {\r\n        try {\r\n            const response = await fetch(\r\n                `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${TMDB_API_KEY}`\r\n            );\r\n            if (!response.ok) {\r\n                throw new Error(`TMDB API error: ${response.status}`);\r\n            }\r\n            return response.json();\r\n        } catch (error) {\r\n            console.error('Error fetching movie credits:', error);\r\n            throw error;\r\n        }\r\n    }\r\n};\r\n\r\nexport const authAPI = {\r\n    register: async (userData) => {\r\n        return apiRequest('/api/auth/register', {\r\n            method: 'POST',\r\n            body: JSON.stringify(userData),\r\n        });\r\n    },\r\n\r\n    login: async (credentials) => {\r\n        return apiRequest('/api/auth/login', {\r\n            method: 'POST',\r\n            body: JSON.stringify(credentials),\r\n        });\r\n    },\r\n\r\n    getCurrentUser: async () => {\r\n        return apiRequest('/api/auth/me');\r\n    },\r\n};\r\n\r\nexport const reviewAPI = {\r\n    createReview: async (reviewData) => {\r\n        return apiRequest('/api/reviews', {\r\n            method: 'POST',\r\n            body: JSON.stringify(reviewData),\r\n        });\r\n    },\r\n\r\n    getMovieReviews: async (movieId) => {\r\n        return apiRequest(`/api/reviews/movie/${movieId}`);\r\n    },\r\n\r\n    getUserReviews: async () => {\r\n        return apiRequest('/api/reviews/user');\r\n    },\r\n\r\n    deleteReview: async (reviewId) => {\r\n        return apiRequest(`/api/reviews/${reviewId}`, {\r\n            method: 'DELETE',\r\n        });\r\n    },\r\n};\r\n\r\nexport const healthCheck = async () => {\r\n    return apiRequest('/api/health');\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}